// This is an autogenerated file from running `firebase genkit:new`. Do not edit.
'use server';
/**
 * @fileOverview An AI agent for evaluating a student's aptitudes, interests,
 * personality traits, and academic strengths to determine their strong skills.
 *
 * - evaluateAptitudes - A function that handles the aptitude evaluation process.
 * - EvaluateAptitudesInput - The input type for the evaluateAptitudes function.
 * - EvaluateAptitudesOutput - The return type for the evaluateAptitudes function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const EvaluateAptitudesInputSchema = z.object({
  interests: z
    .string()
    .describe('The student\'s interests.'),
  academicBackground: z
    .string()
    .describe('The student\'s academic background.'),
  personalityTraits: z
    .string()
    .describe('The student\'s personality traits.'),
  goals: z
    .string()
    .describe('The student\'s goals.'),
});
export type EvaluateAptitudesInput = z.infer<typeof EvaluateAptitudesInputSchema>;

const EvaluateAptitudesOutputSchema = z.object({
  strongSkills: z
    .string()
    .describe('A list of skills where the student is strong.'),
});
export type EvaluateAptitudesOutput = z.infer<typeof EvaluateAptitudesOutputSchema>;

export async function evaluateAptitudes(input: EvaluateAptitudesInput): Promise<EvaluateAptitudesOutput> {
  return evaluateAptitudesFlow(input);
}

const prompt = ai.definePrompt({
  name: 'evaluateAptitudesPrompt',
  input: {schema: EvaluateAptitudesInputSchema},
  output: {schema: EvaluateAptitudesOutputSchema},
  prompt: `Evaluate the student's aptitudes, interests, personality traits, and academic strengths to determine the skills where they are strong.

Student Interests: {{{interests}}}
Academic Background: {{{academicBackground}}}
Personality Traits: {{{personalityTraits}}}
Goals: {{{goals}}}

Based on this information, identify the student's strong skills.
`,
});

const evaluateAptitudesFlow = ai.defineFlow(
  {
    name: 'evaluateAptitudesFlow',
    inputSchema: EvaluateAptitudesInputSchema,
    outputSchema: EvaluateAptitudesOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
